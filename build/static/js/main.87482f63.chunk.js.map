{"version":3,"sources":["Components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginTop","margin","height","spacing","slider","width","media","card","maxWidth","paper","padding","textAlign","color","palette","text","secondary","paperContent","DiscreteSlider","classes","React","useState","dataBase","setDataBase","count","setCount","step","setStep","useEffect","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collection","get","then","db","d","forEach","data","push","id","className","AppBar","position","Toolbar","variant","Slider","defaultValue","value","marks","label","min","valueLabelDisplay","Paper","size","map","key","CardMedia","image","title","CardContent","Typography","component","name","CardActions","Tooltip","points","aria-label","Fab","onClick","remove","removePoints","sum","addPoints","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87482f63.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Card from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardActions from '@material-ui/core/CardActions';\nimport Fab from '@material-ui/core/Fab';\nimport Remove from '@material-ui/icons/Remove';\nimport Add from '@material-ui/icons/Add';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Avatar from '@material-ui/core/Avatar';\nimport CardContent from '@material-ui/core/CardContent';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport * as firebase from \"firebase/app\";\nimport 'firebase/firestore';\n\n\nconst useStyles = makeStyles(theme => ({\n\n  root: { flexGrow: 1, marginTop: 100 },\n  margin: { height: theme.spacing(3) },\n  slider: { margin: 50, width: '94%', },\n  media: { height: 150, width: 150 },\n  card: { maxWidth: 325, margin: 5 },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  paperContent: {\n    maxWidth: 380,\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nexport default function DiscreteSlider() {\n  const classes = useStyles();\n  const [dataBase, setDataBase] = React.useState([]);\n  const [count, setCount] = useState(0);\n  const [step, setStep] = useState(0);\n\n  const marks = [\n    { value: -100, label: 'gift puppy' },\n    { value: -65, label: 'tickle' },\n    { value: -40, label: 'ffff' },\n    { value: -15, label: 'surprise' },\n    { value: 0, label: '0' },\n    { value: 20, label: 'hands' },\n    { value: 37, label: 'arms' },\n    { value: 55, label: 'feets' },\n    { value: 65, label: 'legs' },\n    { value: 80, label: 'back' },\n    { value: 100, label: 'YOU DIED' },\n  ];\n\n  React.useEffect(() => {\n\n    // const firebaseConfig = {\n    //   apiKey: process.env.FIREBASE_API_KEY,\n    //   authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n    //   databaseURL: process.env.FIREBASE_DATABASE_URL,\n    //   projectId: process.env.FIREBASE_PROJECT_ID,\n    //   storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n    //   messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n    //   apiId: process.env.FIREBASE_API_ID,\n    //   measurementId: process.env.FIREBASE_MEASUREMENT_ID\n    // };\n\n    const firebaseConfig = {\n      apiKey: \"AIzaSyCJQcNik2gERYZpyf3Q3B7B-0MB8Z6YfeQ\",\n      authDomain: \"thermometer-54b6f.firebaseapp.com\",\n      databaseURL: \"https://thermometer-54b6f.firebaseio.com\",\n      projectId: \"thermometer-54b6f\",\n      storageBucket: \"thermometer-54b6f.appspot.com\",\n      messagingSenderId: \"607991062616\",\n      appId: \"1:607991062616:web:83c1f3dd63506f5c93ea2d\"\n    };\n\n    firebase.initializeApp(firebaseConfig);\n\n    const db = firebase.firestore();\n\n    db.collection('thermometer').get()\n      .then(db => {\n        const d = [];\n        // let sum = total;\n        db.forEach(data => {\n          d.push({\n            id: data.id,\n            data: data.data()\n          })\n        })\n        // setTotal(sum)\n        setDataBase(d);\n      })\n  }, [])\n\n  const addPoints = points => {\n    let sum = 0;\n    if (points > 0) sum = count + points;\n    sum = count - (-points);\n    if (sum > 100) sum = 100\n    if (sum < -100) sum = -100\n    setCount(sum);\n    setStep(points)\n  }\n\n  const removePoints = points => {\n    let remove = 0;\n    if (points < 0) remove = points - count;\n    remove = count - points;\n    if (remove > 100) remove = 100;\n    if (remove < -100) remove = -100;\n    setCount(remove);\n    setStep(points)\n  }\n  return (\n    <div className={classes.root}>\n      <div className={classes.margin} />\n      <AppBar position=\"fixed\" color=\"inherit\">\n        <Toolbar variant=\"regular\">\n          {/* <Avatar alt=\"Remy Sharp\" src=\"https://valenciaplaza.com/public/Image/2016/12/Capturadepantalla2016-12-13alas20.59.25.png_NoticiaAmpliada.jpg\" /> */}\n          <Slider\n            className={classes.slider}\n            defaultValue={count}\n            value={count}\n            step={step}\n            marks={marks}\n            min={-100}\n            valueLabelDisplay=\"on\"\n          />\n          {/* <Avatar alt=\"Remy Sharp\"\n            src=\"https://valenciaplaza.com/public/Image/2016/12/Capturadepantalla2016-12-13alas20.59.25.png_NoticiaAmpliada.jpg\" /> */}\n        </Toolbar>\n      </AppBar>\n      <Paper\n        color=\"secondary\"\n        size=\"large\"\n        className={classes.paper}>\n        {dataBase.map(data => (\n          <Card color=\"secondary\" className={classes.card} key={data.id}>\n            {/* <Paper\n              color=\"secondary\"\n              className={classes.paperContent}> */}\n              <CardMedia\n                className={classes.media}\n                image={data.data.image}\n                title=\"Contemplative Reptile\"\n              >\n              </CardMedia>\n              <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                  {data.data.name}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Tooltip title={data.data.points} aria-label=\"remove\">\n                  <Fab size=\"small\" color={data.data.points > 0 ? \"secondary\" : \"primary\"} aria-label=\"remove\"\n                    onClick={() => removePoints(data.data.points)} >\n                    <Remove />\n                  </Fab>\n                </Tooltip>\n                <Tooltip title={data.data.  points} aria-label=\"add\">\n                  <Fab size=\"small\" color={data.data.points > 0 ? \"secondary\" : \"primary\"} aria-label=\"add\"\n                    onClick={() => addPoints(data.data.points)}>\n                    <Add />\n                  </Fab>\n                </Tooltip>\n              </CardActions>\n            {/* </Paper> */}\n          </Card>\n        ))}\n      </Paper>\n    </div >\n  );\n}","import React from 'react';\nimport Slider from \"./Components/Slider\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Slider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}